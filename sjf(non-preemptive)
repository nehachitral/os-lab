#include <stdio.h>
#include <limits.h>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int completion_time;
    int waiting_time;
    int turnaround_time;
};

void SJF(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int min_burst_index;

    while (completed < n) {
        min_burst_index = -1;
        int min_burst = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].completion_time == 0 && processes[i].burst_time < min_burst) {
                min_burst_index = i;
                min_burst = processes[i].burst_time;
            }
        }

        if (min_burst_index == -1) {
            current_time++;
        } else {
            processes[min_burst_index].completion_time = current_time + processes[min_burst_index].burst_time;
            processes[min_burst_index].turnaround_time = processes[min_burst_index].completion_time - processes[min_burst_index].arrival_time;
            processes[min_burst_index].waiting_time = processes[min_burst_index].turnaround_time - processes[min_burst_index].burst_time;
            current_time = processes[min_burst_index].completion_time;
            completed++;
        }
    }
}

int main() {
    int n;
    printf("Enter the total number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    printf("Enter Arrival Time and Burst Time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].completion_time = 0;
    }

    SJF(processes, n);

    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    float total_completion_time = 0, total_turnaround_time = 0, total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
        total_completion_time += processes[i].completion_time;
        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;
    }

    printf("\nAverage Completion Time: %.2f\n", total_completion_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);

    return 0;
}
